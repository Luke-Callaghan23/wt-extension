{
	"name": "wtaniwe",
	"displayName": "WTANIWE - Writing Tool, An Integrated Writing Environment",
	"description": "Writing Tool, An Integrated Writing Environment",
	"version": "0.0.123",
	"publisher": "luke-callaghan",
	"icon": "media/icon.png",
	"private": false,
	"license": "MIT",
	"repository": {
		"type": "git",
		"url": "https://github.com/Luke-Callaghan23/wt-extension"
	},
	"engines": {
		"vscode": "^1.74.0"
	},
	"categories": [
		"Other"
	],
	"activationEvents": [
		"onView:wt.outline",
		"onView:wt.wordWatcher",
		"onView:wt.todo",
		"onView:wt.synonyms",
		"onView:wt.wh",
		"onView:wt.import.fileExplorer",
		"onView:wt.export",
		"onView:wt.scratchPad",
		"onView:wt.recyclingBin",
		"onView:wt.workBible.tree"
	],
	"main": "./out/extension.js",
	"contributes": {
		"configuration": {
			"title": "Writing Tool Configuration",
			"properties": {
				"wt.tabLabels.maxSize": {
					"type": "number",
					"default": -1,
					"description": "Max size of labels to be displayed in a tab.  Anything longer than this will be sortened to fit."
				},
				"wt.showPanels.wordWatcher": {
					"type": "boolean",
					"default": true,
					"description": "Determines whether you want to show the 'Word Watcher' panel.\n  NOTE: hiding the panel will NOT disable all side effects of the panel."
				},
				"wt.showPanels.overview": {
					"type": "boolean",
					"default": true,
					"description": "Determines whether you want to show the 'Text Overview' panel.\n  NOTE: hiding the panel will NOT disable all side effects of the panel."
				},
				"wt.showPanels.TODO": {
					"type": "boolean",
					"default": true,
					"description": "Determines whether you want to show the 'TODO' panel.\n  NOTE: hiding the panel will NOT disable all side effects of the panel."
				},
				"wt.showPanels.synonyms": {
					"type": "boolean",
					"default": true,
					"description": "Determines whether you want to show the 'Synonyms' panel.\n  NOTE: hiding the panel will NOT disable all side effects of the panel."
				},
				"wt.showPanels.WH": {
					"type": "boolean",
					"default": true,
					"description": "Determines whether you want to show the 'WH' panel.\n  NOTE: hiding the panel will NOT disable all side effects of the panel."
				},
				"wt.showPanels.importFileExplorer": {
					"type": "boolean",
					"default": true,
					"description": "Determines whether you want to show the 'Import File Explorer' panel.\n  NOTE: hiding the panel will NOT disable all side effects of the panel."
				},
				"wt.showPanels.export": {
					"type": "boolean",
					"default": true,
					"description": "Determines whether you want to show the 'Export' panel.\n  NOTE: hiding the panel will NOT disable all side effects of the panel."
				},
				"wt.showPanels.scratchPad": {
					"type": "boolean",
					"default": true,
					"description": "Determines whether you want to show the 'Scratch Pad' panel.\n  NOTE: hiding the panel will NOT disable all side effects of the panel."
				},
				"wt.showPanels.recyclingBin": {
					"type": "boolean",
					"default": true,
					"description": "Determines whether you want to show the 'Recycling Bin' panel.\n  NOTE: hiding the panel will NOT disable all side effects of the panel."
				},
				"wt.showPanels.workBible": {
					"type": "boolean",
					"default": true,
					"description": "Determines whether you want to show the 'Work Bible' panel.\n  NOTE: hiding the panel will NOT disable all side effects of the panel."
				},
				"wt.speech.voice": {
					"type": "string",
					"default": null,
					"description": "Name of voice used to speak text."
				},
				"wt.speech.speed": {
					"type": "number",
					"default": 1,
					"description": "Speech rate speed multiplier."
				},
				"wt.timedSearches.overview": {
					"description": "Enable automatic Overview Querying",
					"type": "boolean",
					"default": true
				},
				"wt.timedSearches.todo": {
					"description": "Enable automatic TODO querying",
					"type": "boolean",
					"default": true
				},
				"wt.timedSearches.wordWatcher": {
					"description": "Enable automatic querying/highlighting for watched words",
					"type": "boolean",
					"default": true
				},
				"wt.timedSearches.spellcheck": {
					"description": "Enable automatic spellcheck",
					"type": "boolean",
					"default": true
				},
				"wt.timedSearches.very": {
					"title": "Enable automatic checks for instances of the word 'very'",
					"type": "boolean",
					"default": true
				},
				"wt.timedSearches.colors": {
					"description": "Enable automatic checks and highlighting for 'color' words",
					"type": "boolean",
					"default": true
				},
				"wt.timedSearches.textStyle": {
					"description": "Enable automatic text styling",
					"type": "boolean",
					"default": true
				},
				"wt.timedSearches.workBible": {
					"description": "Enable automatic querying for terms in your notes",
					"type": "boolean",
					"default": true
				},
				"wt.timedSearches.autocorrections": {
					"description": "Enable Autocorrections",
					"type": "boolean",
					"default": true
				},
				"wt.editor.showSaveAll": {
					"description": "Enable the 'Save All' button in the editor toolbar",
					"type": "boolean",
					"default": true
				},
				"wt.editor.showSearchWord": {
					"description": "Enable the 'Search Word' button in the editor toolbar",
					"type": "boolean",
					"default": true
				},
				"wt.editor.showItalisize": {
					"description": "Enable the 'Italisize' button in the editor toolbar",
					"type": "boolean",
					"default": true
				},
				"wt.editor.showBold": {
					"description": "Enable the 'Bold' button in the editor toolbar",
					"type": "boolean",
					"default": true
				},
				"wt.editor.showStrikethrough": {
					"description": "Enable the 'Strikethrough' button in the editor toolbar",
					"type": "boolean",
					"default": true
				},
				"wt.editor.showUnderline": {
					"description": "Enable the 'Underline' button in the editor toolbar",
					"type": "boolean",
					"default": true
				},
				"wt.editor.showRemove": {
					"description": "Enable the 'Remove' button in the editor toolbar",
					"type": "boolean",
					"default": true
				}
			}
		},
		"viewsWelcome": [
			{
				"view": "wt.outline",
				"contents": "No WT workspace found.\n[Create Workspace](command:wt.createWorkspace)\nImport a workspace from a .iwe file.\n[Import Workspace](command:wt.importWorkspace)\nAttempt to reload the current workspace.\n[Reload](command:wt.reload)",
				"when": "!wt.valid"
			},
			{
				"view": "wt.export",
				"contents": "Export your work into documents.\n[Export Documents](command:wt.export.exportDocuments)\nExport your work into a single .iwe file for portability.\n[Export Workspace](command:wt.export.exportWorkspace)"
			}
		],
		"viewsContainers": {
			"activitybar": [
				{
					"id": "wt",
					"title": "Writing Tool",
					"icon": "$(bookmark)"
				},
				{
					"id": "wtSearch",
					"title": "Writing Tool: Search",
					"icon": "media/icons/bookmark-search.svg"
				}
			],
			"panel": [
				{
					"id": "workBible",
					"title": "Notes",
					"icon": "$(bookmark)"
				}
			]
		},
		"views": {
			"wt": [
				{
					"id": "wt.outline",
					"name": "Outline",
					"contextualTitle": "Outline"
				},
				{
					"id": "wt.wordWatcher",
					"name": "Word Watcher",
					"contextualTitle": "Word Watcher",
					"when": "wt.valid && config.wt.showPanels.wordWatcher"
				},
				{
					"id": "wt.overview",
					"name": "Text Overview",
					"contextualTitle": "Text Overview",
					"when": "wt.valid && config.wt.showPanels.overview"
				},
				{
					"id": "wt.todo",
					"name": "TODOs",
					"contextualTitle": "TODOs",
					"when": "wt.valid && config.wt.showPanels.TODO"
				},
				{
					"type": "webview",
					"id": "wt.synonyms",
					"name": "Synonyms",
					"contextualTitle": "Synonyms",
					"when": "wt.valid && config.wt.showPanels.synonyms"
				},
				{
					"type": "webview",
					"id": "wt.wh",
					"name": "Wh",
					"contextualTitle": "Wh",
					"when": "wt.valid && config.wt.showPanels.WH"
				},
				{
					"id": "wt.import.fileExplorer",
					"name": "Import",
					"contextualTitle": "Import",
					"when": "wt.valid && config.wt.showPanels.importFileExplorer"
				},
				{
					"id": "wt.export",
					"name": "Export",
					"contextualTitle": "Export",
					"when": "wt.valid && config.wt.showPanels.export"
				},
				{
					"id": "wt.scratchPad",
					"name": "Scratch Pad",
					"contextualTitle": "Scratch Pad",
					"when": "wt.valid && config.wt.showPanels.scratchPad"
				},
				{
					"id": "wt.recyclingBin",
					"name": "Recycling Bin",
					"contextualTitle": "Recycling Bin",
					"when": "wt.valid && config.wt.showPanels.recyclingBin"
				}
			],
			"workBible": [
				{
					"id": "wt.workBible.tree",
					"name": "Notes",
					"contextualTitle": "Notes",
					"when": "wt.valid && config.wt.showPanels.workBible"
				}
			],
			"wtSearch": [
				{
					"type": "webview",
					"id": "wt.wtSearch.search",
					"name": "Writing Tool Search: Search",
					"contextualTitle": "Writing Tool Search: Search",
					"when": "wt.valid"
				},
				{
					"id": "wt.wtSearch.results",
					"name": "Writing Tool Search: Results",
					"contextualTitle": "Writing Tool Search: Results",
					"when": "wt.valid"
				}
			]
		},
		"commands": [
			{
				"command": "wt.convert",
				"title": "Writing Tool: Convert to New File names"
			},
			{
				"title": "Writing Tool: Search Files",
				"command": "wt.searchFiles"
			},
			{
				"command": "wt.tabLabels.renameActiveTab",
				"title": "Writing Tool: Rename Active Tab"
			},
			{
				"command": "wt.tabLabels.rename",
				"title": "Writing Tool: Rename File"
			},
			{
				"command": "wt.createWorkspace",
				"title": "Create",
				"enablement": "!wt.valid"
			},
			{
				"command": "wt.workspace.loadContextValues",
				"title": "Writing Tool: Load context values JSON file into this workspace."
			},
			{
				"command": "wt.workspace.generateContextValues",
				"title": "Writing Tool: Generate context values file for this workspace."
			},
			{
				"command": "wt.wordCount.showWordCountRules",
				"title": "Writing Tool: Show word count information."
			},
			{
				"command": "wt.wordCount.showFullWordCounts",
				"title": "Writing Tool: Show word counts for full project."
			},
			{
				"command": "wt.outline.refresh",
				"title": "Writing Tool: Refresh Outline View",
				"icon": "$(refresh)"
			},
			{
				"command": "wt.outline.moveDown",
				"title": "Writing Tool: Move Resource Down",
				"icon": "$(diff-editor-next-change)"
			},
			{
				"command": "wt.outline.moveUp",
				"title": "Writing Tool: Move Resource Up",
				"icon": "$(diff-editor-previous-change)"
			},
			{
				"command": "wt.outline.help",
				"title": "Writing Tool: Outline View Help",
				"icon": "$(question)"
			},
			{
				"command": "wt.outline.openFile",
				"title": "Writing Tool: Open Fragment From Outline"
			},
			{
				"command": "wt.outline.renameFile",
				"title": "Writing Tool: Rename Resource"
			},
			{
				"command": "wt.outline.newSnip",
				"title": "Writing Tool: Create New Snip",
				"icon": "$(output-view-icon)"
			},
			{
				"command": "wt.outline.newChapter",
				"title": "Writing Tool: Create New Chapter",
				"icon": "$(open-editors-view-icon)"
			},
			{
				"command": "wt.outline.newFragment",
				"title": "Writing Tool: Create New Fragment",
				"icon": "$(search-new-editor)"
			},
			{
				"command": "wt.outline.removeResource",
				"title": "Writing Tool: Delete Resource in Outline"
			},
			{
				"command": "wt.outline.copyItems",
				"title": "Writing Tool: Copy Outline Tree Items"
			},
			{
				"command": "wt.outline.pasteItems",
				"title": "Writing Tool: Paste Outline Tree Items"
			},
			{
				"command": "wt.outline.duplicateItems",
				"title": "Writing Tool: Duplicate Outline Tree Items"
			},
			{
				"command": "wt.outline.copyPath",
				"title": "Writing Tool: Copy Path"
			},
			{
				"command": "wt.outline.copyRelativePath",
				"title": "Writing Tool: Copy Relative Path"
			},
			{
				"command": "wt.scratchPad.openFile",
				"title": "Writing Tool: Open Scratch Pad File"
			},
			{
				"command": "wt.scratchPad.newFile",
				"title": "Writing Tool: Create Scratch Pad File",
				"icon": "$(search-new-editor)"
			},
			{
				"command": "wt.scratchPad.renameFile",
				"title": "Writing Tool: Rename Resource"
			},
			{
				"command": "wt.scratchPad.permanentlyDelete",
				"title": "Writing Tool: Pemanently Delete Resource"
			},
			{
				"command": "wt.scratchPad.deleteAll",
				"title": "Writing Tool: Delete All",
				"icon": "$(circle-slash)"
			},
			{
				"command": "wt.scratchPad.refresh",
				"title": "Writing Tool: Refresh Scratch Pad View",
				"icon": "$(refresh)"
			},
			{
				"command": "wt.recyclingBin.renameFile",
				"title": "Writing Tool: Rename Recycled Resource"
			},
			{
				"command": "wt.recyclingBin.permanentlyDelete",
				"title": "Writing Tool: Pemanently Delete Resource"
			},
			{
				"command": "wt.recyclingBin.deleteAll",
				"title": "Writing Tool: Delete All",
				"icon": "$(circle-slash)"
			},
			{
				"command": "wt.recyclingBin.refresh",
				"title": "Writing Tool: Refresh Recycling Bin View",
				"icon": "$(refresh)"
			},
			{
				"command": "wt.todo.copyPath",
				"title": "Writing Tool: Copy Path"
			},
			{
				"command": "wt.todo.copyRelativePath",
				"title": "Writing Tool: Copy Relative Path"
			},
			{
				"command": "wt.import.fileExplorer.refresh",
				"title": "Writing Tool: Refresh Import File Explorer",
				"icon": "$(refresh)"
			},
			{
				"command": "wt.import.fileExplorer.importFiles",
				"title": "Writing Tool: Import All Files",
				"icon": "$(ports-forward-icon)"
			},
			{
				"command": "wt.import.fileExplorer.importFile",
				"title": "Writing Tool: Import Selected File"
			},
			{
				"command": "wt.import.fileExplorer.removeResource",
				"title": "Writing Tool: Remove File from Imports"
			},
			{
				"command": "wt.import.fileExplorer.help",
				"title": "Writing Tool: Import File Explorer Help",
				"icon": "$(question)"
			},
			{
				"command": "wt.import.fileExplorer.openImportWindow",
				"title": "Writing Tool: Open Import Folder",
				"icon": "$(folder-active)"
			},
			{
				"command": "wt.import.fileExplorer.filter",
				"title": "Writing Tool: Filter Selected Resource from Imports Folder",
				"icon": "$(close)"
			},
			{
				"command": "wt.import.fileExplorer.defilter",
				"title": "Writing Tool: Un-Filter Selected Resource from Imports Folder",
				"icon": "$(check)"
			},
			{
				"command": "wt.import.fileExplorer.openFileExplorer",
				"title": "Writing Tool: Open File Explorer",
				"icon": "$(file-directory)"
			},
			{
				"command": "wt.todo.refresh",
				"title": "Writing Tool: Refresh TODOs View",
				"icon": "$(refresh)"
			},
			{
				"command": "wt.todo.help",
				"title": "Writing Tool: TODOs View Help",
				"icon": "$(question)"
			},
			{
				"command": "wt.proximity.addFilteredWord",
				"title": "Writing Tool: Remove word from proximity checks"
			},
			{
				"command": "wt.proximity.removeFilteredWord",
				"title": "Writing Tool: Add word back to proximity checks"
			},
			{
				"command": "wt.wordWatcher.help",
				"title": "Writing Tool: Word Watcher View Help",
				"icon": "$(question)"
			},
			{
				"command": "wt.wordWatcher.disableWatchedWord",
				"title": "Writing Tool: Disable Watched Word"
			},
			{
				"command": "wt.wordWatcher.enableWatchedWord",
				"title": "Writing Tool: Enable Watched Word"
			},
			{
				"command": "wt.wordWatcher.newWatchedWord",
				"title": "Writing Tool: Watch New Word",
				"icon": "$(plus)"
			},
			{
				"command": "wt.wordWatcher.newUnwatchedWord",
				"title": "Writing Tool: Prevent Watching Word",
				"icon": "$(dash)"
			},
			{
				"command": "wt.wordWatcher.deleteWord",
				"title": "Writing Tool: Delete Watched Word"
			},
			{
				"command": "wt.wordWatcher.deleteUnwatchedWord",
				"title": "Writing Tool: Delete Unwatched Word"
			},
			{
				"command": "wt.wordWatcher.jumpNextInstanceOf",
				"title": "Writing Tool: Jump to Next Instance of Watched Word"
			},
			{
				"command": "wt.wordWatcher.changeColor",
				"title": "Writing Tool: Change watched word color"
			},
			{
				"command": "wt.wordWatcher.changePattern",
				"title": "Writing Tool: Change watched word pattern"
			},
			{
				"command": "wt.wordWatcher.addCommonWords",
				"title": "Writing Tool: Add Common Words to Word Watcher"
			},
			{
				"command": "wt.synonyms.help",
				"title": "Writing Tool: Synonyms View Help",
				"icon": "$(question)"
			},
			{
				"command": "wt.synonyms.searchWord",
				"title": "Writing Tool: Search Synonym",
				"icon": "$(search)"
			},
			{
				"command": "wt.intellisense.synonyms.shiftMode",
				"title": "Writing Tool: Swap Synonyms Mode (between WordHippo (slower but better) and a generic API)"
			},
			{
				"command": "wt.editor.remove",
				"title": "Writing Tool: Clear Selection",
				"icon": "$(trash)"
			},
			{
				"command": "wt.editor.save",
				"title": "Writing Tool: Commit File (to local git)",
				"icon": "$(save)"
			},
			{
				"command": "wt.editor.saveAll",
				"title": "Writing Tool: Commit All Files (to local git)",
				"icon": "$(save-all)"
			},
			{
				"command": "wt.editor.italisize",
				"title": "Writing Tool: Italisize Selection",
				"icon": "$(italic)"
			},
			{
				"command": "wt.editor.commasize",
				"title": "Writing Tool: Commasize Selection"
			},
			{
				"command": "wt.editor.bold",
				"title": "Writing Tool: Bold Selection",
				"icon": "$(bold)"
			},
			{
				"command": "wt.editor.strikethrough",
				"title": "Writing Tool: Strike Selection",
				"icon": "$(zap)"
			},
			{
				"command": "wt.editor.underline",
				"title": "Writing Tool: Underline Selection",
				"icon": "$(layout-statusbar)"
			},
			{
				"command": "wt.editor.emdash",
				"title": "Writing Tool: Em Dash",
				"icon": "$(remove)"
			},
			{
				"command": "wt.editor.emdashes",
				"title": "Writing Tool: Em Dashes",
				"icon": "$(list-filter)"
			},
			{
				"command": "wt.editor.word.forward",
				"title": "Writing Tool: Jump to Word (forward)."
			},
			{
				"command": "wt.editor.word.backward",
				"title": "Writing Tool: Jump to Word (backward)."
			},
			{
				"command": "wt.editor.jump.fragment.forward",
				"title": "Writing Tool: Jump to Sentence Fragment (forward)."
			},
			{
				"command": "wt.editor.jump.fragment.backward",
				"title": "Writing Tool: Jump to Sentence Fragment (backward)."
			},
			{
				"command": "wt.editor.jump.sentence.forward",
				"title": "Writing Tool: Jump to Sentence (forward)."
			},
			{
				"command": "wt.editor.jump.sentence.backward",
				"title": "Writing Tool: Jump to Sentence (backward)."
			},
			{
				"command": "wt.editor.jump.paragraph.forward",
				"title": "Writing Tool: Jump to paragraph (forward)."
			},
			{
				"command": "wt.editor.jump.paragraph.backward",
				"title": "Writing Tool: Jump to paragraph (backward)."
			},
			{
				"command": "wt.editor.word.forward.shift",
				"title": "Writing Tool: Jump to Word (forward) (select)."
			},
			{
				"command": "wt.editor.word.backward.shift",
				"title": "Writing Tool: Jump to Word (backward) (select)."
			},
			{
				"command": "wt.editor.jump.fragment.forward.shift",
				"title": "Writing Tool: Jump to Sentence Framgent (forward) (select)."
			},
			{
				"command": "wt.editor.jump.fragment.backward.shift",
				"title": "Writing Tool: Jump to Sentence Framgent (backward) (select)."
			},
			{
				"command": "wt.editor.jump.sentence.forward.shift",
				"title": "Writing Tool: Jump to Sentence (forward) (select)."
			},
			{
				"command": "wt.editor.jump.sentence.backward.shift",
				"title": "Writing Tool: Jump to Sentence (backward) (select)."
			},
			{
				"command": "wt.editor.jump.paragraph.forward.shift",
				"title": "Writing Tool: Jump to paragraph (forward) (select)."
			},
			{
				"command": "wt.editor.jump.paragraph.backward.shift",
				"title": "Writing Tool: Jump to paragraph (backward) (select)."
			},
			{
				"command": "wt.editor.delete.forward",
				"title": "Writing Tool: Delete Word (forward)."
			},
			{
				"command": "wt.editor.delete.backward",
				"title": "Writing Tool: Delete Word (backward)."
			},
			{
				"command": "wt.personalDictionary.add",
				"title": "Writing Tool: Add word to personal dictionary"
			},
			{
				"command": "wt.personalDictionary.remove",
				"title": "Writing Tool: Remove word from personal dictionary"
			},
			{
				"command": "wt.colors.addColor",
				"title": "Writing Tool: Add Color to Color Group"
			},
			{
				"command": "wt.colors.removeColor",
				"title": "Writing Tool: Remove Color from Color Group"
			},
			{
				"title": "Writing Tool: Enter Code Mode",
				"command": "wt.codeMode.enterCodeMode",
				"when": "wt.valid && view == wt.wordWatcher"
			},
			{
				"title": "Writing Tool: Change Code Mode Repo",
				"command": "wt.codeMode.changeCodeModeRepo",
				"when": "wt.valid && view == wt.wordWatcher"
			},
			{
				"title": "Writing Tool: Exit Code Mode",
				"command": "wt.codeMode.exitCodeMode",
				"when": "wt.valid && view == wt.wordWatcher"
			},
			{
				"title": "Writing Tool: Toggle Code Mode",
				"command": "wt.codeMode.swapMode",
				"when": "wt.valid && view == wt.wordWatcher"
			},
			{
				"title": "Writing Tool: Display Options",
				"command": "wt.statusBarTimer.displayOptions",
				"when": "wt.valid && view == wt.wordWatcher"
			},
			{
				"title": "Writing Tool: Show Timer Rules",
				"command": "wt.statusBarTimer.showInfo",
				"when": "wt.valid && view == wt.wordWatcher"
			},
			{
				"title": "Writing Tool: Reset Timer",
				"command": "wt.statusBarTimer.resetTimer",
				"when": "wt.valid && view == wt.wordWatcher"
			},
			{
				"title": "Writing Tool: Add Note",
				"command": "wt.workBible.addNote",
				"icon": "$(add)"
			},
			{
				"title": "Writing Tool: Remove Note",
				"command": "wt.workBible.removeNote",
				"icon": "$(trashcan)"
			},
			{
				"title": "Writing Tool: Search For Note",
				"command": "wt.workBible.search"
			},
			{
				"title": "Writing Tool: Add Alias",
				"command": "wt.workBible.addAlias",
				"icon": "$(add)"
			},
			{
				"title": "Writing Tool: Search For Note",
				"command": "wt.workBible.search"
			},
			{
				"title": "Writing Tool: Open Note in editor",
				"command": "wt.workBible.editNote",
				"icon": "$(edit)"
			},
			{
				"title": "Writing Tool: Open Introduction Walkthrough",
				"command": "wt.walkthroughs.openIntro"
			},
			{
				"title": "Writing Tool: Open Imorts Walkthrough",
				"command": "wt.walkthroughs.openImports"
			},
			{
				"title": "Writing Tool: Comment sentence",
				"command": "wt.editor.todo.commentSentence"
			},
			{
				"title": "Writing Tool: Comment fragment",
				"command": "wt.editor.todo.commentFragment"
			},
			{
				"title": "Writing Tool: Comment paragraph",
				"command": "wt.editor.todo.commentParagraph"
			},
			{
				"title": "Writing Tool: Highlight sentence",
				"command": "wt.editor.highlightSentence"
			},
			{
				"title": "Writing Tool: Highlight fragment",
				"command": "wt.editor.highlightFragment"
			},
			{
				"title": "Writing Tool: Highlight paragraph",
				"command": "wt.editor.highlightParagraph"
			},
			{
				"title": "Writing Tool: Expand Highlight",
				"command": "wt.editor.highlightExpand"
			},
			{
				"title": "Writing Tool: Insert Double Quotes",
				"command": "wt.editor.addQuotes"
			},
			{
				"title": "Writing Tool: Insert Accent",
				"command": "wt.editor.accent.insertAccent"
			},
			{
				"command": "wt.wordWatcher.refresh",
				"title": "Writing Tool: Refresh wordWatcher"
			},
			{
				"command": "wt.synonyms.refresh",
				"title": "Writing Tool: Refresh synonyms"
			},
			{
				"command": "wt.wh.refresh",
				"title": "Writing Tool: Refresh wh"
			},
			{
				"command": "wt.personalDictionary.refresh",
				"title": "Writing Tool: Refresh personalDictionary"
			},
			{
				"command": "wt.colors.refresh",
				"title": "Writing Tool: Refresh colors"
			},
			{
				"command": "wt.workBible.refresh",
				"title": "Writing Tool: Refresh workBible"
			},
			{
				"command": "wt.reloadWatcher.reloadWorkspace",
				"title": "Writing Tool: Refresh Workspace"
			},
			{
				"command": "wt.tabStates.saveCurrentState",
				"title": "Writing Tool: Save Current Tab State"
			},
			{
				"command": "wt.tabStates.overwriteTabState",
				"title": "Writing Tool: Overwrite Existing Tab State with Current"
			},
			{
				"command": "wt.tabStates.restoreState",
				"title": "Writing Tool: Restore to previous Tab State"
			},
			{
				"command": "wt.tabStates.renameState",
				"title": "Writing Tool: Rename a previous Tab State"
			},
			{
				"command": "wt.outline.manualMove",
				"title": "Writing Tool: Move Node"
			},
			{
				"title": "Writing Tool: Move Node",
				"command": "wt.scratchPad.manualMove"
			},
			{
				"title": "Writing Tool: Recover Node",
				"command": "wt.recyclingBin.manualMove"
			},
			{
				"command": "wt.outline.commandPalette.copyNode",
				"title": "Writing Tool: Outline: Copy Resource"
			},
			{
				"command": "wt.outline.commandPalette.pasteNode",
				"title": "Writing Tool: Outline: Paste Resource"
			},
			{
				"command": "wt.outline.commandPalette.duplicateNode",
				"title": "Writing Tool: Outline: Duplicate Node"
			},
			{
				"command": "wt.outline.commandPalette.copyRelativePath",
				"title": "Writing Tool: Outline: Copy Relative Path"
			},
			{
				"command": "wt.outline.commandPalette.copyPath",
				"title": "Writing Tool: Outline: Copy Path"
			},
			{
				"command": "wt.outline.commandPalette.deleteNode",
				"title": "Writing Tool: Outline: Delete Node"
			},
			{
				"command": "wt.outline.commandPalette.moveNode",
				"title": "Writing Tool: Outline: Move Node",
				"enablement": "editorLangId == wt"
			},
			{
				"command": "wt.outline.commandPalette.moveCurrentNode",
				"title": "Writing Tool: Outline: Move Current Fragment"
			},
			{
				"command": "wt.outline.commandPalette.renameNode",
				"title": "Writing Tool: Outline: Rename Node"
			},
			{
				"title": "Writing Tool: Scratch Pad: Pemanently Delete Resource",
				"command": "wt.scratchPad.commandPalette.deleteNode"
			},
			{
				"title": "Writing Tool: Scratch Pad: Rename Resource",
				"command": "wt.scratchPad.commandPalette.renameNode"
			},
			{
				"title": "Writing Tool: Scratch Pad: Move Node",
				"command": "wt.scratchPad.commandPalette.moveNode"
			},
			{
				"title": "Writing Tool: Recycling Bin: Pemanently Delete Resource",
				"command": "wt.recyclingBin.commandPalette.deleteNode"
			},
			{
				"title": "Writing Tool: Recycling Bin: Rename Recycled Resource",
				"command": "wt.recyclingBin.commandPalette.renameNode"
			},
			{
				"title": "Writing Tool: Recycling Bin: Recover Node",
				"command": "wt.recyclingBin.commandPalette.recoverNode"
			},
			{
				"title": "Writing Tool: Word Watcher: Change watched word color",
				"command": "wt.wordWatcher.commandPalette.changeColor"
			},
			{
				"title": "Writing Tool: Word Watcher: Change watched word pattern",
				"command": "wt.wordWatcher.commandPalette.changePattern"
			},
			{
				"title": "Writing Tool: Word Watcher: Delete Watched Word",
				"command": "wt.wordWatcher.commandPalette.deleteWord"
			},
			{
				"command": "wt.wordWatcher.commandPalette.deleteUnwatchedWord",
				"title": "Writing Tool: Word Watcher: Delete Unwatched Word"
			},
			{
				"command": "wt.autocorrections.wordReplaced",
				"title": "Writing Tool: Called when a word is replaced through spellcheck"
			},
			{
				"title": "Writing Tool: Recover Node",
				"command": "wt.recyclingBin.recoverNode"
			},
			{
				"title": "Writing Tool Search: Search",
				"command": "wt.wtSearch.results.search"
			},
			{
				"title": "Go to Outline Node",
				"command": "wt.wtSearch.results.revealNodeInOutline"
			},
			{
				"title": "Writing Tool Search: Hide Node",
				"command": "wt.wtSearch.results.hideNode",
				"icon": "$(x)"
			}
		],
		"menus": {
			"commandPalette": [
				{
					"command": "wt.wtSearch.results.revealNodeInOutline"
				},
				{
					"command": "wt.wtSearch.results.hideNode"
				},
				{
					"command": "wt.autocorrections.wordReplaced",
					"when": "false"
				},
				{
					"command": "wt.outline.manualMove",
					"when": "false"
				},
				{
					"command": "wt.scratchPad.manualMove",
					"when": "false"
				},
				{
					"command": "wt.recyclingBin.manualMove",
					"when": "false"
				},
				{
					"command": "wt.editor.accent.insertAccent",
					"when": "editorLangId == wt || editorLangId == wtNote"
				},
				{
					"command": "wt.editor.addQuotes",
					"when": "false"
				},
				{
					"command": "wt.tabLabels.rename",
					"when": "false"
				},
				{
					"command": "wt.createWorkspace",
					"when": "false"
				},
				{
					"command": "wt.workspace.loadContextValues",
					"when": "false"
				},
				{
					"command": "wt.workspace.generateContextValues",
					"when": "false"
				},
				{
					"command": "wt.outline.moveDown",
					"when": "false"
				},
				{
					"command": "wt.outline.moveUp",
					"when": "false"
				},
				{
					"command": "wt.outline.openFile",
					"when": "false"
				},
				{
					"command": "wt.outline.renameFile",
					"when": "false"
				},
				{
					"command": "wt.outline.removeResource",
					"when": "false"
				},
				{
					"command": "wt.outline.copyItems",
					"when": "false"
				},
				{
					"command": "wt.outline.pasteItems",
					"when": "false"
				},
				{
					"command": "wt.outline.duplicateItems",
					"when": "false"
				},
				{
					"command": "wt.outline.copyPath",
					"when": "false"
				},
				{
					"command": "wt.outline.copyRelativePath",
					"when": "false"
				},
				{
					"command": "wt.scratchPad.openFile",
					"when": "false"
				},
				{
					"command": "wt.scratchPad.permanentlyDelete",
					"when": "false"
				},
				{
					"command": "wt.scratchPad.deleteAll",
					"when": "false"
				},
				{
					"command": "wt.recyclingBin.renameFile",
					"when": "false"
				},
				{
					"command": "wt.recyclingBin.permanentlyDelete",
					"when": "false"
				},
				{
					"command": "wt.recyclingBin.deleteAll",
					"when": "false"
				},
				{
					"command": "wt.todo.copyPath",
					"when": "false"
				},
				{
					"command": "wt.todo.copyRelativePath",
					"when": "false"
				},
				{
					"command": "wt.import.fileExplorer.importFile",
					"when": "false"
				},
				{
					"command": "wt.import.fileExplorer.removeResource",
					"when": "false"
				},
				{
					"command": "wt.import.fileExplorer.filter",
					"when": "false"
				},
				{
					"command": "wt.import.fileExplorer.defilter",
					"when": "false"
				},
				{
					"command": "wt.proximity.addFilteredWord",
					"when": "false"
				},
				{
					"command": "wt.proximity.removeFilteredWord",
					"when": "false"
				},
				{
					"command": "wt.wordWatcher.disableWatchedWord",
					"when": "false"
				},
				{
					"command": "wt.wordWatcher.enableWatchedWord",
					"when": "false"
				},
				{
					"command": "wt.wordWatcher.deleteWord",
					"when": "false"
				},
				{
					"command": "wt.wordWatcher.deleteUnwatchedWord",
					"when": "false"
				},
				{
					"command": "wt.wordWatcher.jumpNextInstanceOf",
					"when": "false"
				},
				{
					"command": "wt.wordWatcher.changeColor",
					"when": "false"
				},
				{
					"command": "wt.wordWatcher.changePattern",
					"when": "false"
				},
				{
					"command": "wt.editor.italisize",
					"when": "false"
				},
				{
					"command": "wt.editor.commasize",
					"when": "false"
				},
				{
					"command": "wt.editor.bold",
					"when": "false"
				},
				{
					"command": "wt.editor.strikethrough",
					"when": "false"
				},
				{
					"command": "wt.editor.underline",
					"when": "false"
				},
				{
					"command": "wt.editor.emdash",
					"when": "false"
				},
				{
					"command": "wt.editor.emdashes",
					"when": "false"
				},
				{
					"command": "wt.editor.word.forward",
					"when": "false"
				},
				{
					"command": "wt.editor.word.backward",
					"when": "false"
				},
				{
					"command": "wt.editor.jump.fragment.forward",
					"when": "false"
				},
				{
					"command": "wt.editor.jump.fragment.backward",
					"when": "false"
				},
				{
					"command": "wt.editor.jump.sentence.forward",
					"when": "false"
				},
				{
					"command": "wt.editor.jump.sentence.backward",
					"when": "false"
				},
				{
					"command": "wt.editor.jump.paragraph.forward",
					"when": "false"
				},
				{
					"command": "wt.editor.jump.paragraph.backward",
					"when": "false"
				},
				{
					"command": "wt.editor.word.forward.shift",
					"when": "false"
				},
				{
					"command": "wt.editor.word.backward.shift",
					"when": "false"
				},
				{
					"command": "wt.editor.jump.fragment.forward.shift",
					"when": "false"
				},
				{
					"command": "wt.editor.jump.fragment.backward.shift",
					"when": "false"
				},
				{
					"command": "wt.editor.jump.sentence.forward.shift",
					"when": "false"
				},
				{
					"command": "wt.editor.jump.sentence.backward.shift",
					"when": "false"
				},
				{
					"command": "wt.editor.jump.paragraph.forward.shift",
					"when": "false"
				},
				{
					"command": "wt.editor.jump.paragraph.backward.shift",
					"when": "false"
				},
				{
					"command": "wt.editor.delete.forward",
					"when": "false"
				},
				{
					"command": "wt.editor.delete.backward",
					"when": "false"
				},
				{
					"command": "wt.workBible.addNote",
					"when": "false"
				},
				{
					"command": "wt.workBible.removeNote",
					"when": "false"
				},
				{
					"command": "wt.workBible.search",
					"when": "false"
				},
				{
					"command": "wt.workBible.editNote",
					"when": "false"
				},
				{
					"command": "wt.editor.todo.commentSentence",
					"when": "false"
				},
				{
					"command": "wt.editor.todo.commentFragment",
					"when": "false"
				},
				{
					"command": "wt.editor.todo.commentParagraph",
					"when": "false"
				},
				{
					"command": "wt.editor.highlightSentence",
					"when": "false"
				},
				{
					"command": "wt.editor.highlightFragment",
					"when": "false"
				},
				{
					"command": "wt.editor.highlightParagraph",
					"when": "false"
				},
				{
					"command": "wt.editor.highlightExpand",
					"when": "false"
				},
				{
					"command": "wt.wordWatcher.refresh",
					"when": "false"
				},
				{
					"command": "wt.synonyms.refresh",
					"when": "false"
				},
				{
					"command": "wt.wh.refresh",
					"when": "false"
				},
				{
					"command": "wt.personalDictionary.refresh",
					"when": "false"
				},
				{
					"command": "wt.colors.refresh",
					"when": "false"
				},
				{
					"command": "wt.workBible.refresh",
					"when": "false"
				}
			],
			"view/title": [
				{
					"command": "wt.outline.newFragment",
					"when": "wt.valid && view == wt.outline",
					"group": "navigation@1"
				},
				{
					"command": "wt.outline.newSnip",
					"when": "wt.valid && view == wt.outline",
					"group": "navigation@2"
				},
				{
					"command": "wt.outline.newChapter",
					"when": "wt.valid && view == wt.outline",
					"group": "navigation@3"
				},
				{
					"command": "wt.outline.refresh",
					"when": "wt.valid && view == wt.outline",
					"group": "navigation@4"
				},
				{
					"command": "wt.outline.help",
					"when": "wt.valid && view == wt.outline",
					"group": "navigation@5"
				},
				{
					"command": "wt.scratchPad.newFile",
					"when": "wt.valid && view == wt.scratchPad",
					"group": "navigation@1"
				},
				{
					"command": "wt.scratchPad.deleteAll",
					"when": "wt.valid && view == wt.scratchPad",
					"group": "navigation@3"
				},
				{
					"command": "wt.scratchPad.refresh",
					"when": "wt.valid && view == wt.scratchPad",
					"group": "navigation@2"
				},
				{
					"command": "wt.recyclingBin.deleteAll",
					"when": "wt.valid && view == wt.recyclingBin",
					"group": "navigation@2"
				},
				{
					"command": "wt.recyclingBin.refresh",
					"when": "wt.valid && view == wt.recyclingBin",
					"group": "navigation@1"
				},
				{
					"command": "wt.synonyms.help",
					"when": "wt.valid && view == wt.synonyms",
					"group": "navigation"
				},
				{
					"command": "wt.todo.refresh",
					"when": "wt.valid && view == wt.todo",
					"group": "navigation@1"
				},
				{
					"command": "wt.todo.help",
					"when": "wt.valid && view == wt.todo",
					"group": "navigation@2"
				},
				{
					"command": "wt.import.fileExplorer.help",
					"when": "wt.valid && view == wt.import.fileExplorer",
					"group": "navigation@5"
				},
				{
					"command": "wt.import.fileExplorer.openImportWindow",
					"when": "wt.valid && view == wt.import.fileExplorer",
					"group": "navigation@4"
				},
				{
					"command": "wt.import.fileExplorer.openFileExplorer",
					"when": "wt.valid && view == wt.import.fileExplorer",
					"group": "navigation@3"
				},
				{
					"command": "wt.import.fileExplorer.refresh",
					"when": "wt.valid && view == wt.import.fileExplorer",
					"group": "navigation@2"
				},
				{
					"command": "wt.import.fileExplorer.importFiles",
					"when": "wt.valid && view == wt.import.fileExplorer",
					"group": "navigation@1"
				},
				{
					"command": "wt.wordWatcher.newWatchedWord",
					"when": "wt.valid && view == wt.wordWatcher",
					"group": "navigation@1"
				},
				{
					"command": "wt.wordWatcher.newUnwatchedWord",
					"when": "wt.valid && view == wt.wordWatcher",
					"group": "navigation@2"
				},
				{
					"command": "wt.wordWatcher.help",
					"when": "wt.valid && view == wt.wordWatcher",
					"group": "navigation@3"
				},
				{
					"command": "wt.workBible.addNote",
					"when": "view == wt.workBible.tree",
					"group": "navigation"
				}
			],
			"editor/title/context": [
				{
					"command": "wt.tabLabels.rename"
				}
			],
			"view/item/context": [
				{
					"command": "wt.outline.refresh",
					"when": "view == wt.outline && viewItem == dir || viewItem == container",
					"group": "inline@3"
				},
				{
					"command": "wt.outline.moveUp",
					"when": "view == wt.outline && viewItem != container",
					"group": "inline@1"
				},
				{
					"command": "wt.outline.moveDown",
					"when": "view == wt.outline && viewItem != container",
					"group": "inline@2"
				},
				{
					"command": "wt.outline.renameFile",
					"when": "view == wt.outline"
				},
				{
					"command": "wt.outline.manualMove",
					"when": "view == wt.outline"
				},
				{
					"command": "wt.outline.removeResource",
					"when": "view == wt.outline"
				},
				{
					"command": "wt.outline.copyItems",
					"when": "view == wt.outline",
					"group": "5_cutcopypaste@1"
				},
				{
					"command": "wt.outline.pasteItems",
					"when": "view == wt.outline",
					"group": "5_cutcopypaste@2"
				},
				{
					"command": "wt.outline.duplicateItems",
					"when": "view == wt.outline",
					"group": "5_cutcopypaste@3"
				},
				{
					"command": "wt.outline.copyPath",
					"when": "view == wt.outline || view == wt.todo",
					"group": "copy_path@7"
				},
				{
					"command": "wt.outline.copyRelativePath",
					"when": "view == wt.outline || view == wt.todo",
					"group": "copy_path@7"
				},
				{
					"command": "wt.scratchPad.renameFile",
					"when": "view == wt.scratchPad"
				},
				{
					"command": "wt.scratchPad.permanentlyDelete",
					"when": "view == wt.scratchPad"
				},
				{
					"command": "wt.scratchPad.deleteAll",
					"when": "view == wt.scratchPad"
				},
				{
					"command": "wt.scratchPad.manualMove",
					"when": "view == wt.scratchPad"
				},
				{
					"command": "wt.recyclingBin.renameFile",
					"when": "view == wt.recyclingBin"
				},
				{
					"command": "wt.recyclingBin.permanentlyDelete",
					"when": "view == wt.recyclingBin"
				},
				{
					"command": "wt.recyclingBin.deleteAll",
					"when": "view == wt.recyclingBin"
				},
				{
					"command": "wt.recyclingBin.recoverNode",
					"when": "view == wt.recyclingBin"
				},
				{
					"command": "wt.wordWatcher.deleteWord",
					"when": "view == wt.wordWatcher && (viewItem == watchedWord_disabled || viewItem == watchedWord_enabled)"
				},
				{
					"command": "wt.wordWatcher.disableWatchedWord",
					"when": "view == wt.wordWatcher && viewItem == watchedWord_enabled"
				},
				{
					"command": "wt.wordWatcher.changeColor",
					"when": "view == wt.wordWatcher && viewItem == watchedWord_enabled"
				},
				{
					"command": "wt.wordWatcher.changePattern",
					"when": "view == wt.wordWatcher && viewItem == watchedWord_enabled"
				},
				{
					"command": "wt.wordWatcher.enableWatchedWord",
					"when": "view == wt.wordWatcher && viewItem == watchedWord_disabled"
				},
				{
					"command": "wt.wordWatcher.deleteUnwatchedWord",
					"when": "view == wt.wordWatcher && viewItem == unwatchedWord"
				},
				{
					"command": "wt.import.fileExplorer.removeResource",
					"when": "view == wt.import.fileExplorer"
				},
				{
					"command": "wt.import.fileExplorer.filter",
					"when": "view == wt.import.fileExplorer && viewItem == unfiltered",
					"group": "inline"
				},
				{
					"command": "wt.import.fileExplorer.defilter",
					"when": "view == wt.import.fileExplorer && viewItem == filtered",
					"group": "inline"
				},
				{
					"command": "wt.workBible.addNote",
					"when": "view == wt.workBible.tree && viewItem == note",
					"group": "inline@1"
				},
				{
					"command": "wt.workBible.removeNote",
					"when": "view == wt.workBible.tree && viewItem == note",
					"group": "inline@2"
				},
				{
					"command": "wt.workBible.search",
					"when": "view == wt.workBible.tree && viewItem == note",
					"group": "search@1"
				},
				{
					"command": "wt.workBible.editNote",
					"when": "view == wt.workBible.tree",
					"group": "inline@3"
				},
				{
					"command": "wt.wtSearch.results.hideNode",
					"when": "view == wt.wtSearch.results",
					"group": "inline"
				},
				{
					"command": "wt.wtSearch.results.revealNodeInOutline",
					"when": "view == wt.wtSearch.results"
				}
			],
			"editor/title": [
				{
					"command": "wt.editor.saveAll",
					"when": "(editorLangId == wt || editorLangId == wtNote) && config.wt.editor.showSaveAll",
					"group": "navigation@2"
				},
				{
					"command": "wt.synonyms.searchWord",
					"when": "(editorLangId == wt || editorLangId == wtNote) && config.wt.editor.showSearchWord",
					"group": "navigation@3"
				},
				{
					"command": "wt.editor.italisize",
					"when": "(editorLangId == wt || editorLangId == wtNote) && config.wt.editor.showItalisize",
					"group": "navigation@3"
				},
				{
					"command": "wt.editor.bold",
					"when": "(editorLangId == wt || editorLangId == wtNote) && config.wt.editor.showBold",
					"group": "navigation@5"
				},
				{
					"command": "wt.editor.strikethrough",
					"when": "(editorLangId == wt || editorLangId == wtNote) && config.wt.editor.showStrikethrough",
					"group": "navigation@6"
				},
				{
					"command": "wt.editor.underline",
					"when": "(editorLangId == wt || editorLangId == wtNote) && config.wt.editor.showUnderline",
					"group": "navigation@7"
				},
				{
					"command": "wt.editor.remove",
					"when": "(editorLangId == wt || editorLangId == wtNote) && config.wt.editor.showRemove",
					"group": "navigation@9"
				}
			]
		},
		"keybindings": [
			{
				"command": "wt.tabLabels.renameActiveTab",
				"win": "shift+f2",
				"linux": "shift+f2",
				"mac": "shift+f2",
				"when": "(editorLangId == wt || editorLangId == wtNote) && editorTextFocus"
			},
			{
				"command": "wt.searchFiles",
				"win": "ctrl+p",
				"linux": "ctrl+p",
				"mac": "cmd+p",
				"when": "wt.valid"
			},
			{
				"command": "wt.editor.addQuotes",
				"win": "shift+'",
				"linux": "shift+'",
				"mac": "shift+'",
				"when": "(editorLangId == wt || editorLangId == wtNote) && editorTextFocus"
			},
			{
				"command": "wt.scratchPad.renameFile",
				"win": "f2",
				"linux": "f2",
				"mac": "f2",
				"when": "activeViewlet == workbench.view.extension.wt && focusedView == wt.scratchPad"
			},
			{
				"command": "wt.scratchPad.newFile",
				"win": "ctrl+t",
				"linux": "ctrl+t",
				"mac": "ctrl+t",
				"when": "editorLangId == wt || editorLangId == wtNote"
			},
			{
				"command": "wt.scratchPad.permanentlyDelete",
				"win": "delete",
				"linux": "delete",
				"mac": "delete",
				"when": "activeViewlet == workbench.view.extension.wt && focusedView == wt.scratchPad"
			},
			{
				"command": "wt.recyclingBin.renameFile",
				"win": "f2",
				"linux": "f2",
				"mac": "f2",
				"when": "activeViewlet == workbench.view.extension.wt && focusedView == wt.recyclingBin"
			},
			{
				"command": "wt.recyclingBin.permanentlyDelete",
				"win": "delete",
				"linux": "delete",
				"mac": "delete",
				"when": "activeViewlet == workbench.view.extension.wt && focusedView == wt.recyclingBin"
			},
			{
				"command": "wt.outline.renameFile",
				"win": "f2",
				"linux": "f2",
				"mac": "f2",
				"when": "activeViewlet == workbench.view.extension.wt && focusedView == wt.outline"
			},
			{
				"command": "wt.outline.copyItems",
				"win": "ctrl+c",
				"linux": "ctrl+c",
				"mac": "cmd+c",
				"when": "activeViewlet == workbench.view.extension.wt && focusedView == wt.outline"
			},
			{
				"command": "wt.outline.pasteItems",
				"win": "ctrl+v",
				"linux": "ctrl+v",
				"mac": "cmd+v",
				"when": "activeViewlet == workbench.view.extension.wt && focusedView == wt.outline"
			},
			{
				"command": "wt.outline.removeResource",
				"win": "delete",
				"linux": "delete",
				"mac": "delete",
				"when": "activeViewlet == workbench.view.extension.wt && focusedView == wt.outline"
			},
			{
				"command": "wt.wordWatcher.deleteWord",
				"win": "delete",
				"linux": "delete",
				"mac": "delete",
				"when": "activeViewlet == workbench.view.extension.wt && focusedView == wt.wordWatcher && viewItem == watchedWord"
			},
			{
				"command": "wt.wordWatcher.deleteUnwatchedWord",
				"win": "delete",
				"linux": "delete",
				"mac": "delete",
				"when": "activeViewlet == workbench.view.extension.wt && focusedView == wt.wordWatcher && viewItem == unwatchedWord"
			},
			{
				"command": "wt.synonyms.searchWord",
				"win": "ctrl+alt+f",
				"linux": "ctrl+alt+f",
				"mac": "cmd+alt+f",
				"when": "(editorLangId == wt || editorLangId == wtNote) && editorTextFocus"
			},
			{
				"command": "wt.editor.save",
				"win": "ctrl+alt+s",
				"linux": "ctrl+alt+s",
				"mac": "cmd+alt+s",
				"when": "(editorLangId == wt || editorLangId == wtNote) && editorTextFocus"
			},
			{
				"command": "wt.editor.saveAll",
				"win": "ctrl+alt+shift+s",
				"linux": "ctrl+alt+shift+s",
				"mac": "cmd+alt+shift+s",
				"when": "(editorLangId == wt || editorLangId == wtNote) && editorTextFocus"
			},
			{
				"command": "wt.editor.italisize",
				"win": "ctrl+alt+i",
				"linux": "ctrl+alt+i",
				"mac": "cmd+alt+i",
				"when": "(editorLangId == wt || editorLangId == wtNote) && editorTextFocus"
			},
			{
				"command": "wt.editor.commasize",
				"win": "ctrl+alt+,",
				"linux": "ctrl+alt+,",
				"mac": "cmd+alt+,",
				"when": "(editorLangId == wt || editorLangId == wtNote) && editorTextFocus"
			},
			{
				"command": "wt.editor.bold",
				"win": "ctrl+alt+b",
				"linux": "ctrl+alt+b",
				"mac": "cmd+alt+b",
				"when": "(editorLangId == wt || editorLangId == wtNote) && editorTextFocus"
			},
			{
				"command": "wt.editor.strikethrough",
				"win": "ctrl+alt+d",
				"linux": "ctrl+alt+d",
				"mac": "cmd+alt+d",
				"when": "(editorLangId == wt || editorLangId == wtNote) && editorTextFocus"
			},
			{
				"command": "wt.editor.underline",
				"win": "ctrl+alt+u",
				"linux": "ctrl+alt+u",
				"mac": "cmd+alt+u",
				"when": "(editorLangId == wt || editorLangId == wtNote) && editorTextFocus"
			},
			{
				"command": "wt.editor.emdash",
				"win": "ctrl+alt+-",
				"linux": "ctrl+alt+-",
				"mac": "cmd+alt+-",
				"when": "(editorLangId == wt || editorLangId == wtNote) && editorTextFocus"
			},
			{
				"command": "wt.editor.emdashes",
				"win": "ctrl+alt+shift+-",
				"linux": "ctrl+alt+shift+-",
				"mac": "cmd+alt+shift+-",
				"when": "(editorLangId == wt || editorLangId == wtNote) && editorTextFocus"
			},
			{
				"command": "wt.editor.jump.word.forward",
				"win": "ctrl+left",
				"linux": "ctrl+left",
				"mac": "cmd+left",
				"when": "(editorLangId == wt || editorLangId == wtNote) && editorTextFocus"
			},
			{
				"command": "wt.editor.jump.word.backward",
				"win": "ctrl+right",
				"linux": "ctrl+right",
				"mac": "cmd+right",
				"when": "(editorLangId == wt || editorLangId == wtNote) && editorTextFocus"
			},
			{
				"command": "wt.editor.jump.sentence.forward",
				"win": "ctrl+[",
				"linux": "ctrl+[",
				"mac": "cmd+[",
				"when": "(editorLangId == wt || editorLangId == wtNote) && editorTextFocus"
			},
			{
				"command": "wt.editor.jump.sentence.backward",
				"win": "ctrl+]",
				"linux": "ctrl+]",
				"mac": "cmd+]",
				"when": "(editorLangId == wt || editorLangId == wtNote) && editorTextFocus"
			},
			{
				"command": "wt.editor.jump.fragment.forward",
				"win": "alt+[",
				"linux": "alt+[",
				"mac": "alt+[",
				"when": "(editorLangId == wt || editorLangId == wtNote) && editorTextFocus"
			},
			{
				"command": "wt.editor.jump.fragment.backward",
				"win": "alt+]",
				"linux": "alt+]",
				"mac": "alt+]",
				"when": "(editorLangId == wt || editorLangId == wtNote) && editorTextFocus"
			},
			{
				"command": "wt.editor.jump.paragraph.forward",
				"win": "ctrl+alt+[",
				"linux": "ctrl+alt+[",
				"mac": "cmd+alt+[",
				"when": "(editorLangId == wt || editorLangId == wtNote) && editorTextFocus"
			},
			{
				"command": "wt.editor.jump.paragraph.backward",
				"win": "ctrl+alt+]",
				"linux": "ctrl+alt+]",
				"mac": "cmd+alt+]",
				"when": "(editorLangId == wt || editorLangId == wtNote) && editorTextFocus"
			},
			{
				"command": "wt.editor.jump.word.forward.shift",
				"win": "ctrl+shift+left",
				"linux": "ctrl+shift+left",
				"mac": "cmd+shift+left",
				"when": "(editorLangId == wt || editorLangId == wtNote) && editorTextFocus"
			},
			{
				"command": "wt.editor.jump.word.backward.shift",
				"win": "ctrl+shift+right",
				"linux": "ctrl+shift+right",
				"mac": "cmd+shift+right",
				"when": "(editorLangId == wt || editorLangId == wtNote) && editorTextFocus"
			},
			{
				"command": "wt.editor.jump.sentence.forward.shift",
				"win": "ctrl+shift+[",
				"linux": "ctrl+shift+[",
				"mac": "cmd+shift+[",
				"when": "(editorLangId == wt || editorLangId == wtNote) && editorTextFocus"
			},
			{
				"command": "wt.editor.jump.sentence.backward.shift",
				"win": "ctrl+shift+]",
				"linux": "ctrl+shift+]",
				"mac": "cmd+shift+]",
				"when": "(editorLangId == wt || editorLangId == wtNote) && editorTextFocus"
			},
			{
				"command": "wt.editor.jump.fragment.forward.shift",
				"win": "alt+shift+[",
				"linux": "alt+shift+[",
				"mac": "alt+shift+[",
				"when": "(editorLangId == wt || editorLangId == wtNote) && editorTextFocus"
			},
			{
				"command": "wt.editor.jump.fragment.backward.shift",
				"win": "alt+shift+]",
				"linux": "alt+shift+]",
				"mac": "alt+shift+]",
				"when": "(editorLangId == wt || editorLangId == wtNote) && editorTextFocus"
			},
			{
				"command": "wt.editor.jump.paragraph.forward.shift",
				"win": "ctrl+alt+shift+[",
				"linux": "ctrl+alt+shift+[",
				"mac": "cmd+alt+shift+[",
				"when": "(editorLangId == wt || editorLangId == wtNote) && editorTextFocus"
			},
			{
				"command": "wt.editor.jump.paragraph.backward.shift",
				"win": "ctrl+alt+shift+]",
				"linux": "ctrl+alt+shift+]",
				"mac": "cmd+alt+shift+]",
				"when": "(editorLangId == wt || editorLangId == wtNote) && editorTextFocus"
			},
			{
				"command": "wt.editor.delete.forward",
				"win": "ctrl+backspace",
				"linux": "ctrl+backspace",
				"mac": "cmd+backspace",
				"when": "(editorLangId == wt || editorLangId == wtNote) && editorTextFocus"
			},
			{
				"command": "wt.editor.delete.backward",
				"win": "ctrl+delete",
				"linux": "ctrl+delete",
				"mac": "cmd+delete",
				"when": "(editorLangId == wt || editorLangId == wtNote) && editorTextFocus"
			},
			{
				"command": "wt.intellisense.synonyms.shiftMode",
				"win": "ctrl+shift+alt+space",
				"linux": "ctrl+shift+alt+space",
				"mac": "cmd+shift+alt+space",
				"when": "(editorLangId == wt || editorLangId == wtNote) && editorTextFocus"
			},
			{
				"command": "wt.intellisense.synonyms.prevDefinition",
				"win": "ctrl+up",
				"linux": "ctrl+up",
				"mac": "cmd+up",
				"when": "(suggestWidgetMultipleSuggestions && suggestWidgetVisible && textInputFocus || suggestWidgetVisible && textInputFocus && !suggestWidgetHasFocusedSuggestion) && (editorLangId == wt || editorLangId == wtNote)"
			},
			{
				"command": "wt.intellisense.synonyms.nextDefinition",
				"win": "ctrl+down",
				"linux": "ctrl+down",
				"mac": "cmd+down",
				"when": "(suggestWidgetMultipleSuggestions && suggestWidgetVisible && textInputFocus || suggestWidgetVisible && textInputFocus && !suggestWidgetHasFocusedSuggestion) && (editorLangId == wt || editorLangId == wtNote)"
			},
			{
				"command": "wt.intellisense.synonyms.prevSelection",
				"win": "up",
				"linux": "up",
				"mac": "up",
				"when": "(suggestWidgetMultipleSuggestions && suggestWidgetVisible && textInputFocus || suggestWidgetVisible && textInputFocus && !suggestWidgetHasFocusedSuggestion) && (editorLangId == wt || editorLangId == wtNote)"
			},
			{
				"command": "wt.intellisense.synonyms.nextSelection",
				"win": "down",
				"linux": "down",
				"mac": "down",
				"when": "(suggestWidgetMultipleSuggestions && suggestWidgetVisible && textInputFocus || suggestWidgetVisible && textInputFocus && !suggestWidgetHasFocusedSuggestion) && (editorLangId == wt || editorLangId == wtNote)"
			},
			{
				"command": "wt.codeMode.swapMode",
				"win": "ctrl+shift+alt+m",
				"linux": "ctrl+shift+alt+m",
				"mac": "cmd+shift+alt+m",
				"when": "(editorLangId == wt || editorLangId == wtNote) && editorTextFocus"
			},
			{
				"command": "wt.editor.todo.commentSentence",
				"win": "ctrl+shift+/",
				"linux": "ctrl+shift+/",
				"mac": "cmd+shift+/",
				"when": "(editorLangId == wt || editorLangId == wtNote) && editorTextFocus"
			},
			{
				"command": "wt.editor.todo.commentFragment",
				"win": "alt+shift+/",
				"linux": "alt+shift+/",
				"mac": "alt+shift+/",
				"when": "(editorLangId == wt || editorLangId == wtNote) && editorTextFocus"
			},
			{
				"command": "wt.editor.todo.commentParagraph",
				"win": "ctrl+alt+shift+/",
				"linux": "ctrl+alt+shift+/",
				"mac": "cmd+alt+shift+/",
				"when": "(editorLangId == wt || editorLangId == wtNote) && editorTextFocus"
			},
			{
				"command": "wt.editor.highlightExpand",
				"win": "ctrl+alt+h",
				"linux": "ctrl+alt+h",
				"mac": "cmd+alt+h",
				"when": "(editorLangId == wt || editorLangId == wtNote) && editorTextFocus"
			},
			{
				"command": "wt.editor.highlightCollapse",
				"win": "ctrl+alt+shift+h",
				"linux": "ctrl+alt+shift+h",
				"mac": "cmd+alt+shift+h",
				"when": "(editorLangId == wt || editorLangId == wtNote) && editorTextFocus"
			},
			{
				"command": "wt.outline.commandPalette.moveCurrentNode",
				"win": "shift+f1",
				"linux": "shift+f1",
				"mac": "shift+f1",
				"when": "editorLangId == wt || editorLangId == wtNote"
			}
		],
		"languages": [
			{
				"id": "wt",
				"extensions": [
					".wt"
				],
				"aliases": [
					"writingTool",
					"fragment"
				],
				"configuration": "./language-configuration.json",
				"icon": {
					"dark": "./media/icons/edit_darkmode.svg",
					"light": "./media/icons/edit_lightmode.svg"
				}
			},
			{
				"id": "wtNote",
				"extensions": [
					".wtnote"
				],
				"aliases": [
					"writingToolNotes"
				],
				"configuration": "./language-configuration.json",
				"icon": {
					"dark": "./media/icons/edit_darkmode.svg",
					"light": "./media/icons/edit_lightmode.svg"
				}
			}
		],
		"walkthroughs": [
			{
				"id": "wt.introWalkthrough",
				"title": "Introduction to WTANIWE",
				"icon": "media/walkthroughs/icon.png",
				"description": "A broad overview of Writing Tool's major features.",
				"steps": [
					{
						"id": "wt.introWalkthrough.organizeIntoChapters",
						"title": "Organize Your Project by the Chapter",
						"description": "- The main impetus behind WANIWE's creation was the ability to organize my extremely fragmented WIP in an easier way.\n- One of the main features of WTANIWE, therefore, is the outline tree, where users can get a clear overview of their progress.",
						"media": {
							"image": "media/walkthroughs/intro/organize_into_chapters.png",
							"altText": "Organize By Chapters"
						}
					},
					{
						"id": "wt.introWalkthrough.organizeIntoFragments",
						"title": "Organize Your Project by Text Fragments",
						"description": "- Instead of throwing all content of a chapter into a single text file, with WTANIWE you can organize the content of your work by smaller, chunkable, text fragments.\n- Anywhere where you would insert a scene break in your work, just create a new text fragment and start with a fresh file.",
						"media": {
							"image": "media/walkthroughs/intro/organize_by_fragments.png",
							"altText": "Organize By Fragments"
						}
					},
					{
						"id": "wt.introWalkthrough.organizeChapterNotes",
						"title": "Organize Notes/Text Snippets for Each Chapter",
						"description": "- Another major motivation for WTANIWE was the ability to organize notes and snippets of text for each chapter in an easily organizable way.\n- Instead of opening twenty different word documents at a time while scouring for that one piece of dialogue I wrote two months ago, and killing my computer in the process, I can place all notes for a project in one place.\n- Just as with chapters, each text note (called snip by WTANIWE) can have multiple text fragments associated with it.",
						"media": {
							"image": "media/walkthroughs/intro/organize_chapter_notes.png",
							"altText": "Organize By Chapters"
						}
					},
					{
						"id": "wt.introWalkthrough.organizeWorkNotes",
						"title": "Organize Snips for Project",
						"description": "- If you're like me, you have about a hundred tiny fragments of text laying around which have a loose place in your story but no solid chapter commitement yet.  Work Snips is a section of the Outline Tree where you can store all misc. text snippets with no solid home yet.\n- Like Chapters and Chapter Snips, Work Snips can be separated into multiple text fragments.",
						"media": {
							"image": "media/walkthroughs/intro/organize_work_notes.png",
							"altText": "Organize By Chapters"
						}
					},
					{
						"id": "wt.introWalkthrough.usePlaintext",
						"title": "Write in Plain Text",
						"description": "- No wasting time for Microsoft to stir up twelve different processes to load one Word Document or for Google to serve you one fragment of your own project, all WTANIWE text files are stored in plain text on your own hard drive.\n- All text stylings you would expect from word are available through a modified version of MarkDown which is more amenable to writing (and, admittedly less feature-rich).\n- Surround text with asterisks (*) to italisize, hashtags (#) to bold, underscores (_) to underline, and tildes (~) to strike through.",
						"media": {
							"image": "media/walkthroughs/intro/style_text.png",
							"altText": "Organize By Chapters"
						}
					},
					{
						"id": "wt.introWalkthrough.wordWatcher",
						"title": "Highlight Problem Words or Phrases",
						"description": "- All people have crutch words and phrases that they over rely on when writing.\n- When using the Word Watcher panel you can enter these words and phrases into the Word Watcher panel, and WTANIWE will highlight them for you.\n- Use [regex](https://www.regex101.com) patterns to select text which fits a pattern instead of whole, known words.  (Such as the regex '[a-zA-Z]+ly' which captures all words that end in 'ly').\n- Modify the colors in the Word Watcher panel to clearly separate each watched word in a visually distinctive way.",
						"media": {
							"image": "media/walkthroughs/intro/word_watcher.png",
							"altText": "Organize By Chapters"
						}
					},
					{
						"id": "wt.introWalkthrough.synonyms",
						"title": "Quickly Find Synonyms For Words",
						"description": "- Without leaving the VS Code window or moving your mouse whatsoever, you can get synonyms for any selected word or phrase by hitting ctrl+space over a selection.\n- This will bring up an intellisense window of synonymous definitions.  Open a definition with enter, then select a synonym with enter again to replace the original.",
						"media": {
							"image": "media/walkthroughs/intro/use_synonyms.gif",
							"altText": "Organize By Chapters"
						}
					},
					{
						"id": "wt.introWalkthrough.navigate",
						"title": "Quickly Navigate your Text",
						"description": "- Use built in writing-focused keybindings to quickly navigate over sentences, sentence fragments, and paragraphs.\n- ctrl+[ / ctrl+] Jumps forward and backward through sentences.\n- alt+[ / alt+] Jumps forward and backward through sentence fragments.\n- ctrl+alt+[ / ctrl+alt+] Jumps forward and backward through paragraphs.",
						"media": {
							"image": "media/walkthroughs/intro/use_navigations.gif",
							"altText": "Use navigation"
						}
					},
					{
						"id": "wt.introWalkthrough.git",
						"title": "Use Git to Track your Progress",
						"description": "- If you've downloaded this from VS Code, you probably know all about git so I won't waste your time explaining it.\n- Git is the de facto source control management software in industry, so why not use it to track your WIP?",
						"media": {
							"image": "media/walkthroughs/intro/git.png",
							"altText": "Use navigation"
						}
					},
					{
						"id": "wt.introWalkthrough.importWork",
						"title": "Import Your Work",
						"description": "- WTANIWE makes it easy to import work from outside sources AND organize that work withing WTANIWE's outline.\n- WTANIWE's importing tool is feature rich and has an entirely separate walkthrough that you can open now or browse through when you want to import\n\n[Open Imports Walkthrough](command:wt.walkthroughs.openImports)",
						"media": {
							"image": "media/walkthroughs/intro/imports.png",
							"altText": "Organize By Chapters"
						}
					}
				]
			},
			{
				"id": "wt.importsWalkthrough",
				"title": "Introduction to WTANIWE's Imports",
				"icon": "media/walkthroughs/icon.png",
				"description": "An in depth look at WTANIWE's imports feature",
				"steps": [
					{
						"id": "wt.importsWalkthrough.overview",
						"title": "Overview",
						"description": "- Overview of the Imports Pane: \n- Hit the folder icon in the imports view to open the folder where all your imported documents should go.\n- Hit the refresh button to update the GUI.\n- Hit the plus button to import all documents in the imports folder.\n- Click on a single file to import just that file (or a folder to import all files in that folder).\n- Before we continue, I recommend you open up some of the generic example docx files to familiarize yourself with the content of this walkthrough.",
						"media": {
							"markdown": "media/walkthroughs/imports/overview.md"
						}
					},
					{
						"id": "wt.importsWalkthrough.importSingleChapter",
						"title": "Import a Single Chapter",
						"description": "- The most basic kind of imports are a single chapter, so let's start there.\n- In the imports form, select the 'Chapter' output type.\n- If you would like to separate the text into separate chapters based on scene breaks, then click on the 'Split the document?' checkbox and enter the pattern you use for scene breaks in the new text box.\n- All separators in WTANIWE are based on regex.  Common scene separators may include three tildes (~~~), three newlines (\\n\\n\\n), or a dot on a line (^\\.$).\n- To learn more about regexes, click [here](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_expressions/Cheatsheet).\n- Test out your regexes [here](https://www.regex101.com).\n- Don't forget to name your chapter as well!\n- Test this out by importing the example document 'Example Single Chapter Import.docx' with the options seen here and you should see a new chapter in the outline tree with the title 'Bob 4 (Bob's No Good, Very Bad Day)' with four lorem ipsum-filled text fragments.",
						"media": {
							"image": "media/walkthroughs/imports/single_chapter.gif",
							"altText": "Organize By Chapters"
						}
					},
					{
						"id": "wt.importsWalkthrough.importMultipleChapters",
						"title": "Import Multiple Chapters",
						"description": "- To split a single document into multiple imported chapters, use the same steps as before but also select the 'Split on chapters?' checkbox.\n- In the new text box that appears, enter the pattern you would like to use to separate your chapters.\n- For example, if you separated your chapters in your imported document with the the text 'CH ###' on a new line between each chapter, enter the regex pattern 'CH \\d+'.\n- ('\\d' indicates a number 0-9, '+' indicates one or more repetitions).\n- To learn more about regexes, click [here](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_expressions/Cheatsheet).\n- Test out your regexes [here](https://www.regex101.com).\n- Don't forget to name your chapter as well!\n- Test this out by importing the example document 'Example Multiple Chapter Import.docx' with the options seen here and you should see three new chapter in the outline tree with the titles 'Wow, so much new (imported) misery for Bob!' with two, one, and three lorem ipsum-filled text fragments respectively.",
						"media": {
							"image": "media/walkthroughs/imports/multiple_chapters.gif",
							"altText": "Organize By Chapters"
						}
					},
					{
						"id": "wt.importsWalkthrough.importSingleChapterSnip",
						"title": "Import a Single Chapter Snippet",
						"description": "- The other main import type is importing notes or text fragments into existing chapters.\n- To import notes into chapters, select the 'Snip' output type.\n- Check the 'Output into Chapter' checkbox to indicate that the destination of the notes is a chapter (and not uncategorized 'Work Snips').\n- And, finally, in the drop down that appears, select the chapter that you would like to insert the snips into.\n- Test this out by importing the example document 'Example Single Snip Import.docx' with the options seen here and you should see one new snip with four new lorem ipsum filled fragments in the selected chapter.",
						"media": {
							"image": "media/walkthroughs/imports/single_snip_into_chapter.gif",
							"altText": "Organize By Chapters"
						}
					},
					{
						"id": "wt.importsWalkthrough.importSingleWorkSnip",
						"title": "Import a Single Work Snippet",
						"description": "- To import uncategorized notes -- or text fragments that do not have a chapter placement yet -- follow the same steps as before, but do no select to import into a specific chapter.\n- Test this out by importing the example document 'Example Single Snip Import.docx' with the options seen here and you should see one new snip with four new lorem ipsum filled fragments in the work snips area.",
						"media": {
							"image": "media/walkthroughs/imports/single_snip_into_work_snips.gif",
							"altText": "Organize By Chapters"
						}
					},
					{
						"id": "wt.importsWalkthrough.importMultipleSnips",
						"title": "Import Multiple Text Snippets",
						"description": "- To import multiple text snippets from a single document, follow the same steps as the multiple chapters import description along with the single snip import instructions.\n- Test this out by importing the example document 'Example Multiple Snip Import.docx' with the options seen here and you should see three new snips in the work snips area.",
						"media": {
							"image": "media/walkthroughs/imports/multiple_snips.gif",
							"altText": "Organize By Chapters"
						}
					},
					{
						"id": "wt.importsWalkthrough.importMultipleNamedChapters",
						"title": "Import Multiple Chapters with Unique Names",
						"description": "- One issue you may have noticed with the importing system so far is that whenever there are more than one imported item in single document, all the Outline Tree items that get produced have similarly patterned names.\n- To fix this, you can assign names to specific sections of the inner items of split documents by using [regex capture groups](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Capturing_group) for capturing unique a part of the splitter pattern.  The part of the split text that is captured by the rightmost capture group in the splitter regex will be used as the title of the chapter.\n- For example, the multiple chapters split step from earlier used the regex pattern 'CH \\d+' to split the single document into multiple chapters.  But, if we changed the splitting pattern to surround the original pattern with parentheses: '(CH \\d+)', we can utilize this capture group to assign unique names to each imported chapter.\n- Test this out by importing the example document 'Example Single Chapter Import.docx' with the options seen here and you should see three chapters added with the names 'CH 1', 'CH 2', and 'CH 3' from the document.",
						"media": {
							"image": "media/walkthroughs/imports/multiple_chapters_named.gif",
							"altText": "Organize By Chapters"
						}
					},
					{
						"id": "wt.importsWalkthrough.importMultipleNamedSnipsNamedFragments",
						"title": "Import Text Snippets with Unique Names and Named Text Fragments",
						"description": "- A more detailed usage of splitter capture groups can be seen on the right.\n- Use more complicated regex patterns such as the splitter '\\[{3,}([^\\]]*)\\]{3,}' to match pairings of triple (or more) square brackets enclosing some (or none) generic text within.\n- For example '\\\\[{3,}([^\\\\]\\]*)\\\\]{3,}' matches the text '\\[\\[\\[\\[\\[Title of the first snip\\]\\]\\]' and uses 'Title of the first snip' as the title of the snip that follows.  It also matches '\\[\\[\\[\\[\\[\\[\\[More brackets\\]\\]\\]\\]\\]\\]\\]' or '\\[\\[\\[Minimum Brackets\\]\\]\\]' or even '\\[\\[\\[\\[\\[[\\]\\]\\]' with no title.\n- In the example document 'Example Named Snips.docx' you can see two splitter patterns used: First the afformentioned pattern '\\[{3,}([^\\]]*)\\]{3,}' to split snips, and also a new pattern '~{3,}([^~]*])~{3,}' which is very similar to that pattern except replace square brackets with tildes.\n- See how the content of the example document corresponds to the imported Outline Tree items.\n- Fragments without preceding '~~~Title~~~' separators recieve generic names 'Imported Fragment (###)' titles, whereas others get names like 'Title of the first fragment'.  Similarly, all the snips recieved names from between the triple bracket pairs.",
						"media": {
							"image": "media/walkthroughs/imports/multiple_snips_named.gif",
							"altText": "Organize By Chapters"
						}
					}
				]
			}
		],
		"grammars": [
			{
				"language": "wtNote",
				"scopeName": "source.wtNote",
				"path": "./syntaxes/wtNote.tmLanguage.json",
				"injectTo": [
					"wtNote"
				]
			},
			{
				"language": "wt",
				"scopeName": "source.wt",
				"path": "./syntaxes/wt.tmLanguage.json",
				"injectTo": [
					"wt"
				]
			}
		],
		"debuggers": [
			{
				"type": "tts",
				"languages": [
					"markdown",
					"wt"
				],
				"label": "TTS Debug",
				"program": ".out/ttsDebugger/src/debugAdapter.js",
				"runtime": "node",
				"initialConfigurations": [
					{
						"type": "tts",
						"request": "launch",
						"name": "Ask for file name",
						"program": "${workspaceFolder}/${command:AskForProgramName}",
						"stopOnEntry": true
					}
				],
				"configurationSnippets": [
					{
						"label": "TTS Debug: Launch",
						"description": "A new configuration for 'debugging' a user selected markdown file.",
						"body": {
							"type": "tts",
							"request": "launch",
							"name": "Ask for file name",
							"program": "^\"\\${workspaceFolder}/\\${command:AskForProgramName}\"",
							"stopOnEntry": true
						}
					}
				],
				"variables": {
					"AskForProgramName": "extension.tts-debug.getProgramName"
				}
			}
		]
	},
	"scripts": {
		"vscode:prepublish": "npm run compile",
		"compile": "tsc -p ./",
		"watch": "tsc -watch -p ./",
		"lint": "eslint \"src/**/*.ts\""
	},
	"devDependencies": {
		"@types/glob": "^7.2.0",
		"@types/he": "^1.2.3",
		"@types/jsdom": "^21.1.0",
		"@types/node": "^16.11.7",
		"@types/path-browserify": "^1.0.2",
		"@types/rwlock": "^5.0.6",
		"@types/turndown": "^5.0.4",
		"@types/uuid": "^9.0.0",
		"@types/vscode": "^1.73.0",
		"@typescript-eslint/eslint-plugin": "^5.42.0",
		"@typescript-eslint/parser": "^5.42.0",
		"eslint": "^8.26.0",
		"typescript": "^4.8.4"
	},
	"dependencies": {
		"@bendera/vscode-webview-elements": "^0.8.1",
		"@types/markdown-it": "^12.2.3",
		"@types/nedb": "^1.8.16",
		"@vscode/codicons": "^0.0.32",
		"@vscode/debugadapter": "^1.65.0",
		"await-notify": "^1.0.1",
		"base64-js": "^1.5.1",
		"file-type": "^18.5.0",
		"he": "^1.2.0",
		"html-to-docx": "^1.6.5",
		"istextorbinary": "^6.0.0",
		"jsdom": "^21.1.0",
		"libreoffice-convert": "^1.5.1",
		"mammoth": "^1.5.1",
		"node-fetch": "^3.3.1",
		"node-fetch-commonjs": "^3.2.4",
		"path-browserify": "^1.0.1",
		"turndown": "^7.1.2",
		"uuid": "^9.0.0",
		"vscode-debugadapter": "^1.51.0",
		"vscode-uri": "^3.0.8"
	}
}
